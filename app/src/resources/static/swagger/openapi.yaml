openapi: 3.0.3
info:
  title: MoneyHarbor — Accounts API
  version: 1.0.0
  description: |
    API для работы со счетами.
    Правило: если при создании передан `title: null`, сервер генерирует строку `"{currency}_счет"`.
servers:
  - url: http://localhost:8080
tags:
  - name: Accounts
  - name: User
    description: Регистрация и аутентификация

security:
  - BasicAuth: [ ]

paths:
  /accounts:
    post:
      tags: [Accounts]
      summary: Create account
      description: |
        Создаёт счёт. `title` необязателен; если `null`, сервер сгенерирует `"{currency}_счет"`.
        При невалидном JSON (ошибка десериализации) — 400.
      operationId: createAccount
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateAccountRequest' }
            examples:
              okWithoutTitle:
                summary: Без title (будет сгенерирован)
                value: { currency: "RUB", amount: 1500.50 }
              okWithTitle:
                summary: С указанным title
                value: { title: "Зарплатный", currency: "USD", amount: 0 }
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL созданного ресурса
              schema: { type: string, format: uri }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AccountResponse' }
        '400':
          description: Bad Request (RFC 9457 Problem Details)
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/ProblemDetails' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /accounts/{id}:
    get:
      tags: [Accounts]
      summary: Get account by id
      operationId: getAccountById
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AccountResponse' }
        '400':
          description: Bad Request (invalid UUID) — RFC 9457 Problem Details
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/ProblemDetails' }
        '404':
          description: Not Found — RFC 9457 Problem Details
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/ProblemDetails' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }

    delete:
      tags: [Accounts]
      summary: Delete account
      operationId: deleteAccount
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: No Content — запись существовала и была удалена
        '200':
          description: OK — записи не было (идемпотентно)
        '400':
          description: Bad Request (invalid UUID) — RFC 9457 Problem Details
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/ProblemDetails' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /user/sign-up:
    post:
      tags: [ User ]
      summary: Регистрация пользователя
      description: Создаёт нового пользователя с ролью USER. Эндпоинт публичный.
      security: [ ]  # переопределяем глобальную защиту: Basic Auth здесь не требуется
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserSignUpRequest' }
            examples:
              ok:
                value: { email: "alice@example.com", password: "Abcdefg1" }
              bad:
                value: { email: "not-an-email", password: "vvvvalera123" }
      responses:
        '201':
          description: Пользователь зарегистрирован
          headers:
            Location:
              description: URI созданного пользователя
              schema: { type: string, format: uri }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserResponse' }
              examples:
                created:
                  value:
                    id: "3f5b4e7a-2c1e-4b7a-9432-6a0b7a5b9e10"
                    email: "alice@example.com"
        '400':
          description: Ошибка валидации
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/ProblemDetails' }
              examples:
                validation:
                  value:
                    type: "about:blank"
                    title: "Invalid request"
                    status: 400
                    detail: "password: must be >= 8 chars, include a digit, and have no 3+ repeating chars; email: must be a valid email"
        '409':
          description: Пользователь с таким email уже существует
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/ProblemDetails' }
              examples:
                conflict:
                  value:
                    type: "about:blank"
                    title: "Conflict"
                    status: 409
                    detail: "Email already registered: alice@example.com"

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

  responses:
    Unauthorized:
      description: Unauthorized — требуется аутентификация
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/ProblemDetails' }
          examples:
            unauthorized:
              value:
                type: "about:blank"
                title: "Unauthorized"
                status: 401
                detail: "Missing or invalid Authorization header"
    Forbidden:
      description: Forbidden — недостаточно прав
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/ProblemDetails' }
          examples:
            forbidden:
              value:
                type: "about:blank"
                title: "Forbidden"
                status: 403
                detail: "Access is denied"
  schemas:
    Currency:
      type: string
      description: Код валюты по ISO 4217.
      enum: [BYN, RUB, USD]
      x-enum-descriptions:
        - "Белорусский рубль"
        - "Российский рубль"
        - "Доллар США"
      example: RUB

    CreateAccountRequest:
      type: object
      required: [currency]
      properties:
        title:
          type: string
          nullable: true
          maxLength: 100
          description: Если null — сервер сгенерирует "{currency}_счет".
          example: null
        currency:
          $ref: '#/components/schemas/Currency'
        amount:
          type: number
          x-java-type: java.math.BigDecimal
          description: Денежная сумма; соответствует NUMERIC(19,2).
          example: 0
          multipleOf: 0.01
          maximum: 100000000000000000
          exclusiveMaximum: true
          minimum: -100000000000000000
          exclusiveMinimum: true
          x-field-extra-annotation: |
            @Digits(integer = 17, fraction = 2)
      example:
        title: null
        currency: RUB
        amount: 0

    AccountResponse:
      type: object
      required: [title, currency, amount]
      properties:
        title:
          type: string
          maxLength: 100
        currency:
          $ref: '#/components/schemas/Currency'
        amount:
          type: number
          x-java-type: java.math.BigDecimal
          description: Денежная сумма; соответствует NUMERIC(19,2).
          example: 1500.50

    ProblemDetails:
      type: object
      description: RFC 9457 Problem Details object
      properties:
        type:
          type: string
          format: uri
          description: URI-идентификатор типа проблемы (или "about:blank")
          example: about:blank
        title:
          type: string
          description: Краткий заголовок проблемы
          example: Bad Request
        status:
          type: integer
          format: int32
          description: HTTP-статус для этой ошибки
          example: 400
        detail:
          type: string
          description: Человеко-читаемое пояснение
          example: Invalid value in request body
        instance:
          type: string
          format: uri
          description: URI конкретного случая (обычно путь запроса)
          example: /accounts/00000000-0000-0000-0000-000000000000
      additionalProperties: true
    UserSignUpRequest:
      type: object
      required: [ email, password ]
      properties:
        email:
          type: string
          format: email
          minLength: 1
          description: Логин в формате email
        password:
          type: string
          minLength: 8
          description: |
            Пароль: ≥ 8 символов, ≥ 1 цифра, без трёх подряд одинаковых символов.
            Проверка шаблоном: ^(?=.*\d)(?!.*(.)\1\1).{8,}$
          pattern: '^(?=.*\d)(?!.*(.)\1\1).{8,}$'
          x-field-extra-annotation: "@com.kavencore.moneyharbor.app.validation.StrongPassword"
          example: Abcdefg1

    UserResponse:
      type: object
      required: [ id, email ]
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email