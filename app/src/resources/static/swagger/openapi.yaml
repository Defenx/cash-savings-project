openapi: 3.0.3
info:
  title: MoneyHarbor — Accounts API
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: Accounts
  - name: User
  - name: Categories
  - name: Operations

security:
  - BasicAuth: [ ]

paths:
  /accounts:
    post:
      tags: [ Accounts ]
      summary: Create account
      description: |
        Создаёт счёт. `title` необязателен; если `null`, сервер сгенерирует `"{currency}_счет"`.
        При невалидном JSON (ошибка десериализации) — 400.
      operationId: createAccount
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateAccountRequest' }
            examples:
              okWithoutTitle:
                summary: Без title (будет сгенерирован)
                value: { currency: "RUB", amount: 1500.50 }
              okWithTitle:
                summary: С указанным title
                value: { title: "Зарплатный", currency: "USD", amount: 0 }
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL созданного ресурса
              schema: { type: string, format: uri }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AccountResponse' }
        '400':
          description: Bad Request (RFC 9457 Problem Details)
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/ProblemDetails' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /accounts/{id}:
    get:
      tags: [ Accounts ]
      summary: Get account by id
      operationId: getAccountById
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AccountResponse' }
        '400':
          description: Bad Request (invalid UUID) — RFC 9457 Problem Details
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/ProblemDetails' }
        '404':
          description: Not Found — RFC 9457 Problem Details
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/ProblemDetails' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }

    delete:
      tags: [ Accounts ]
      summary: Delete account
      operationId: deleteAccount
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: No Content — запись существовала и была удалена
        '200':
          description: OK — записи не было (идемпотентно)
        '400':
          description: Bad Request (invalid UUID) — RFC 9457 Problem Details
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/ProblemDetails' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /user/sign-up:
    post:
      tags: [ User ]
      summary: Регистрация пользователя
      description: Создаёт нового пользователя с ролью USER. Эндпоинт публичный.
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserSignUpRequest' }
            examples:
              ok:
                value: { email: "alice@example.com", password: "Abcdefg1" }
              bad:
                value: { email: "not-an-email", password: "vvvvalera123" }
      responses:
        '201':
          description: Пользователь зарегистрирован
          headers:
            Location:
              description: URI созданного пользователя
              schema: { type: string, format: uri }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserResponse' }
              examples:
                created:
                  value:
                    id: "3f5b4e7a-2c1e-4b7a-9432-6a0b7a5b9e10"
                    email: "alice@example.com"
        '400':
          description: Ошибка валидации
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/ProblemDetails' }
              examples:
                validation:
                  value:
                    type: "about:blank"
                    title: "Invalid request"
                    status: 400
                    detail: "password: must match ^(?=.*\\d)(?!.*(.)\\1{2}).{8,}$; email: must be a valid email"
        '409':
          description: Пользователь с таким email уже существует
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/ProblemDetails' }
              examples:
                conflict:
                  value:
                    type: "about:blank"
                    title: "Conflict"
                    status: 409
                    detail: "Email already registered: alice@example.com"
  /user/profile:
    get:
      tags: [ User ]
      operationId: getUserProfile
      summary: Получение информации о профиле пользователя
      description: Получение информации о профиле пользователя, включает в себя информацию о пользователе и его счетах
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserProfileResponse' }

  /categories:
    post:
      tags: [ Categories ]
      summary: Create category
      description: |
        Создаёт новую категорию. Требует аутентификации.
        `user_id` проставляется автоматически из контекста.
      operationId: createCategory
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateCategoryRequest' }
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL созданной категории
              schema: { type: string, format: uri }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CategoryResponse' }
        '400':
          description: Bad Request (RFC 9457 Problem Details)
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/ProblemDetails' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /operation:
    post:
      operationId: createOperation
      tags: [ Operations ]
      summary: Create operation
      description: |
        Создаёт финансовую операцию по счёту.
        
        Правила валидации:
        - `amount != 0`.
        -  Для категории типа **EXPENSE** `amount` должен быть **< 0**; при **INCOME** — **> 0**. Нарушение вернёт 400.
        - `description` **<=100** символов.
        
        При успешном создании баланс счёта (`account.amount`) пересчитывается: 
        значение операции добавляется к текущему балансу.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateOperationRequest' }
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URI созданной операции
              schema: { type: string, format: uri }
          content:
            application/json:
              schema:
                type: object
                nullable: true
        '400':
          description: Bad Request (RFC 9457 Problem Details)
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/ProblemDetails' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

  responses:
    Unauthorized:
      description: Unauthorized — требуется аутентификация
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/ProblemDetails' }
          examples:
            unauthorized:
              value:
                type: "about:blank"
                title: "Unauthorized"
                status: 401
                detail: "Missing or invalid Authorization header"
    Forbidden:
      description: Forbidden — недостаточно прав
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/ProblemDetails' }
          examples:
            forbidden:
              value:
                type: "about:blank"
                title: "Forbidden"
                status: 403
                detail: "Access is denied"
  schemas:
    Currency:
      type: string
      description: Код валюты по ISO 4217.
      enum: [ BYN, RUB, USD ]
      x-enum-descriptions:
        - "Белорусский рубль"
        - "Российский рубль"
        - "Доллар США"
      example: RUB

    UserAccountDtoResponse:
      type: object
      required: [ currency, title, amount ]
      properties:
        title:
          type: string
          description: Если null — сервер сгенерирует "{currency}_счет".
          example: RUB_счет
        currency:
          $ref: '#/components/schemas/Currency'
        amount:
          type: number
          x-java-type: java.math.BigDecimal
          description: Денежная сумма; соответствует NUMERIC(19,2).
          example: 0
      example:
        title: RUB_счет
        currency: RUB
        amount: 0


    CreateAccountRequest:
      type: object
      required: [ currency ]
      properties:
        title:
          type: string
          nullable: true
          maxLength: 100
          description: Если null — сервер сгенерирует "{currency}_счет".
          example: null
        currency:
          $ref: '#/components/schemas/Currency'
        amount:
          type: number
          x-java-type: java.math.BigDecimal
          description: Денежная сумма; соответствует NUMERIC(19,2).
          example: 0
          multipleOf: 0.01
          maximum: 100000000000000000
          exclusiveMaximum: true
          minimum: -100000000000000000
          exclusiveMinimum: true
          x-field-extra-annotation: |
            @Digits(integer = 17, fraction = 2)
      example:
        title: null
        currency: RUB
        amount: 0

    AccountResponse:
      type: object
      required: [ title, currency, amount ]
      properties:
        title:
          type: string
          maxLength: 100
        currency:
          $ref: '#/components/schemas/Currency'
        amount:
          type: number
          x-java-type: java.math.BigDecimal
          description: Денежная сумма; соответствует NUMERIC(19,2).
          example: 1500.50

    ProblemDetails:
      type: object
      description: RFC 9457 Problem Details object
      properties:
        type:
          type: string
          format: uri
          description: URI-идентификатор типа проблемы (или "about:blank")
          example: about:blank
        title:
          type: string
          description: Краткий заголовок проблемы
          example: Bad Request
        status:
          type: integer
          format: int32
          description: HTTP-статус для этой ошибки
          example: 400
        detail:
          type: string
          description: Человеко-читаемое пояснение
          example: Invalid value in request body
        instance:
          type: string
          format: uri
          description: URI конкретного случая (обычно путь запроса)
          example: /accounts/00000000-0000-0000-0000-000000000000
      additionalProperties: true
    UserSignUpRequest:
      type: object
      required: [ email, password ]
      properties:
        email:
          type: string
          format: email
          minLength: 1
          description: Логин в формате email
        password:
          type: string
          format: password
          minLength: 8
          description: >
            Пароль: длина ≥ 8, хотя бы одна цифра, без трёх одинаковых символов подряд
            символов (например, "vvv" запрещено).
          pattern: '^(?=.*\d)(?!.*(.)\1{2}).{8,}$'
          example: Abcdefg1
          x-pattern-message: 'Пароль: ≥ 8, хотя бы одна цифра, без трёх одинаковых символов подряд'
    UserProfileResponse:
      type: object
      required: [ email, accounts ]
      properties:
        email:
          type: string
          format: email
          description: Логин в формате email
        accounts:
          type: array
          items:
            $ref: "#/components/schemas/UserAccountDtoResponse"
          description: Информация о счетах пользователя

    UserResponse:
      type: object
      required: [ id, email ]
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email

    CreateCategoryRequest:
      type: object
      required: [ name, type ]
      properties:
        name:
          type: string
          description: Название категории
          example: "Зарплата"
        type:
          type: string
          enum: [ INCOME, EXPENSE ]
          description: Тип категории
          example: INCOME

    CategoryResponse:
      type: object
      required: [ id, name, type ]
      properties:
        id:
          type: string
          format: uuid
          description: Уникальный идентификатор категории
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        name:
          type: string
          description: Название категории
          example: "Зарплата"
        type:
          type: string
          enum: [ INCOME, EXPENSE ]
          description: Тип категории
          example: INCOME

    OperationAmount:
      type: number
      x-java-type: java.math.BigDecimal
      x-field-extra-annotation: |
        @Digits(integer = 17, fraction = 2)
      description: |
        Сумма операции (NUMERIC(19,2), шаг 0.01). Должна быть ненулевой.
        Фактический знак проверяется сервером исходя из типа категории.
      example: -1250.50
      multipleOf: 0.01
      minimum: -100000000000000000
      exclusiveMinimum: true
      maximum: 100000000000000000
      exclusiveMaximum: true
      oneOf:
        - maximum: -0.01
        - minimum: 0.01

    CreateOperationRequest:
      type: object
      required: [ account_id, amount, category_id ]
      properties:
        account_id:
          type: string
          format: uuid
          description: Идентификатор счёта, по которому проводится операция.
        date:
          type: string
          format: date
          nullable: true
          description: Дата операции; если null — сервер подставит текущую.
        description:
          type: string
          nullable: true
          maxLength: 100
          description: Краткое описание операции (≤ 100 символов).
        amount:
          type: number
          x-java-type: java.math.BigDecimal
          x-field-extra-annotation: |
            @Digits(integer = 17, fraction = 2)
          description: |
            Сумма операции (NUMERIC(19,2), шаг 0.01). Должна быть ненулевой.
            Фактический знак проверяется сервером исходя из типа категории.
          example: -1250.50
          multipleOf: 0.01
          minimum: -100000000000000000
          exclusiveMinimum: true
          maximum: 100000000000000000
          exclusiveMaximum: true
        category_id:
          type: string
          format: uuid
          description: Идентификатор категории (доход/расход).
      example:
        account_id: "11111111-1111-1111-1111-111111111111"
        date: "2025-10-04"
        description: "Покупка продуктов"
        amount: -1250.50
        category_id: "22222222-2222-2222-2222-222222222222"